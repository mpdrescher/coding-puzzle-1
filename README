My attempt at the following coding puzzle in the Rust language.
(The cargo project is inside the rust folder)

===ORIGINAL TEXT:


This is a coding puzzle I solved during the hiring process of a company. This
repository contains my take on this. I found it so interesting that I like to
share it and my solution.

Please note that the copyright of this puzzle is held by the company. However,
I don't want to name the company here.


				 Coding Puzzle
				 =============

Given a string comprising just of the characters (,),{,},[,] determine if it is
well-formed or not by applying the following rules:

- Each type of bracket needs to be first opened then closed
- You can only close the last bracket that was
- Inside parenthesis () only Braces {} are allowed
- Inside Braces {} only Square brackets [] are allowed
- Any bracket can appear inside square brackets []

For a given string print out True if the string is well-formed or False if
otherwise.

Example input strings:
1
4
()
([)]
{}
()()

Example output:
True
False
False
True


Part I.)
Write a program that can read from stdin. The first line contains the number
test cases t (1<= t <= 1000000) each test cases can have n strings (0 <= n <=
1000) comprising the characters mentioned above. Process all lines and print
out the result to stdout.


Part II.)
Enhance the program from “Part I” so it uses a multi-threaded approach.
Dispatch the actual strings to test to as many threads as the machine has
cores. Because the order is not necessarily the same as the input provide the
output with the referring index of the nth input like this (no spaces):
1:true
2:false

Limitations
- Number of lines (LOC): 500 / 100,000,000
- Total execution time*: 50ms / 15sec
- C++ Compiler: >= 4.1.2 (C++ 11 allowed for new compilers)
- C++ Library: STL and BOOST only
- Java Compiler: >= Java 7
- Source format: Unix

*: without JVM startup time and without writing anything to stdout

Submission
You can solve the puzzle either using Java or C++. For a Java submission please
provide the source files including a pom.xml for your project.

Your C++ submission should be build against Linux. Please provide the source
files including a make file for your project.

Hint
A good way to learn stuff like that is http://www.spoj.com/ (and it's free to
use at no costs - except your nerves)!


				    Solution
				    ========

Some remarks:

This code compiles on my Linux box with gcc version 4.8.1 using libstdc++ and
on my Mac OS X with clang 3.4 (trunk version) and libc++ (also directly from
trunk). Hope it does on your side too.

This solution makes use of run-time polymorphism with all hassles that comes
with it: the necessity to do heap-allocations, manual memory management,
overhead due to virtual function calls.

This solution does a lot of heap allocations (approx. linear to the number of
characters in a string, e.g., a line of 500 open parentheses and 500 close
parentheses does a little more than 500 heap allocations, one for each state).
This is way slower than stack allocation, could lead to fragmentation and
out-of-memory issues in real-world applications. A possible solution would be
to use a custom stack allocator (like that of Howard Hinnant,
http://home.roadrunner.com/~hinnant/stack_alloc.html) but I couldn't find the
time for this experiment.

For your information, I needed about an hour of thinking until I came up with
the stack approach. After that, I needed approximately an additional time of 3
hours for implementing the remaining work.

If you are interested, I included the Git repository in the tarball so that you
are able to see what my steps were.

Had fun doing this, thank you. Hope this meets your expectations and thanks
again for taking the time to review my solution.

Benjamin Kircher, benjamin.kircher@gmail.com
